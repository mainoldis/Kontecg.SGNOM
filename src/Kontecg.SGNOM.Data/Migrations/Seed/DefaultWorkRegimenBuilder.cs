using System;
using System.Linq;
using Castle.Core.Logging;
using Kontecg.EFCore;
using Kontecg.MultiCompany;
using Kontecg.Timing;
using Microsoft.EntityFrameworkCore;

namespace Kontecg.Migrations.Seed
{
    public class DefaultWorkRegimenBuilder
    {
        private readonly SGNOMDbContext _context;
        private readonly ILogger _logger;

        public DefaultWorkRegimenBuilder(SGNOMDbContext context, ILogger logger)
        {
            _context = context;
            _logger = logger;
        }

        public void Create()
        {
            var companyId = KontecgCoreConsts.MultiCompanyEnabled ? MultiCompanyConsts.DefaultCompanyId : 1;
            var workRegimen = AddWorkRegimenIfNotExists(WorkRegimeType.Normal, "5*2-6*1", "08:00*08:00*08:00*08:00*08:00*00:00*00:00-08:00*08:00*08:00*08:00*08:00*08:00*00:00", companyId, legalName: "5x2-6x1");
            if (workRegimen != null)
            {
                AddWorkShiftIfNotExists("Normal", workRegimen, new DateTime(2024, 12, 23), "[08:00-17:00]*[08:00-17:00]*[08:00-17:00]*[08:00-17:00]*[08:00-17:00]*[00:00-00:00]*[00:00-00:00]-[08:00-17:00]*[08:00-17:00]*[08:00-17:00]*[08:00-17:00]*[08:00-17:00]*[08:00-17:00]*[00:00-00:00]", "01:00", 8M, "8hrs", companyId, 0);
            }

            workRegimen = AddWorkRegimenIfNotExists(WorkRegimeType.Special, "5*2", "8:48*8:48*8:48*8:48*8:48*00:00*00:00", companyId, legalName: "5x2");
            if (workRegimen != null)
            {
                AddWorkShiftIfNotExists("N", workRegimen, new DateTime(2017, 1, 2), "[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[00:00-00:00]*[00:00-00:00]", "00:30", 8.8M, "8.8hrs", companyId);
            }

            workRegimen = AddWorkRegimenIfNotExists(WorkRegimeType.Special, "5*4-4*4-4*4-4*4-4*3", "12:00*12:00*12:00*12:00*12:00*00:00*00:00*00:00*00:00-12:00*12:00*12:00*12:00*00:00*00:00*00:00*00:00-12:00*12:00*12:00*12:00*00:00*00:00*00:00*00:00-12:00*12:00*12:00*12:00*00:00*00:00*00:00*00:00-12:00*12:00*12:00*12:00*00:00*00:00*00:00", companyId, "5*4", "4x4");
            if (workRegimen != null)
            {
                AddWorkShiftIfNotExists("A", workRegimen, new DateTime(2019, 1, 16), "[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]", "00:00", 12M, "12hrs", companyId, 1);
                AddWorkShiftIfNotExists("B", workRegimen, new DateTime(2019, 1, 12), "[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]", "00:00", 12M, "12hrs", companyId, 2);
                AddWorkShiftIfNotExists("C", workRegimen, new DateTime(2019, 1, 18), "[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]", "00:00", 12M, "12hrs", companyId, 3);
                AddWorkShiftIfNotExists("D", workRegimen, new DateTime(2019, 1, 14), "[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]", "00:00", 12M, "12hrs", companyId, 4);
                AddWorkShiftIfNotExists("I", workRegimen, new DateTime(2015, 12, 1), "[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]", "00:00", 12M, "12hrs", companyId, 9);
                AddWorkShiftIfNotExists("J", workRegimen, new DateTime(2016, 12, 7), "[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[07:00-19:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]", "00:00", 12M, "12hrs", companyId, 10);
            }

            workRegimen = AddWorkRegimenIfNotExists(WorkRegimeType.Special, "10*4", "8:48*8:48*8:48*8:48*8:48*8:48*8:48*8:48*8:48*8:48*00:00*00:00*00:00*00:00", companyId, legalName: "10x4");
            if (workRegimen != null)
            {
                AddWorkShiftIfNotExists("E", workRegimen, new DateTime(2016, 12, 22), "[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]", "00:00", 8.8M, "8.8hrs", companyId, 5);
                AddWorkShiftIfNotExists("F", workRegimen, new DateTime(2016, 12, 29), "[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[07:30-16:48]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]", "00:00", 8.8M, "8.8hrs", companyId, 6);
            }

            workRegimen = AddWorkRegimenIfNotExists(WorkRegimeType.Special, "4*3-3*3-3*3-3*3-3*3-3*3-3*2", "12:00*12:00*12:00*12:00*00:00*00:00*00:00-12:00*12:00*12:00*00:00*00:00*00:00-12:00*12:00*12:00*00:00*00:00*00:00-12:00*12:00*12:00*00:00*00:00*00:00-12:00*12:00*12:00*00:00*00:00*00:00-12:00*12:00*12:00*00:00*00:00*00:00-12:00*12:00*12:00*00:00*00:00", companyId, "4*3", "3x3");
            if (workRegimen != null)
            {
                AddWorkShiftIfNotExists("G", workRegimen, new DateTime(2017, 1, 26), "[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]", "00:00", 12M, "12hrs", companyId, 7);
                AddWorkShiftIfNotExists("H", workRegimen, new DateTime(2018, 7, 30), "[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[00:00-00:00]-[19:00-07:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]", "00:00", 12M, "12hrs", companyId, 8);
            }

            workRegimen = AddWorkRegimenIfNotExists(WorkRegimeType.Special, "3*2-2*2-2*2-2*2-2*2-2*2-2*2-2*2-2*2-2*2-2*2-2*2-2*2-2*1", "12:00*12:00*12:00*00:00*00:00-12:00*12:00*00:00*00:00-12:00*12:00*00:00*00:00-12:00*12:00*00:00*00:00-12:00*12:00*00:00*00:00-12:00*12:00*00:00*00:00-12:00*12:00*00:00*00:00-12:00*12:00*00:00*00:00-12:00*12:00*00:00*00:00-12:00*12:00*00:00*00:00-12:00*12:00*00:00*00:00-12:00*12:00*00:00*00:00-12:00*12:00*00:00*00:00-12:00*12:00*00:00", companyId, "3*2", "2x2");
            if (workRegimen != null)
            {
                AddWorkShiftIfNotExists("K", workRegimen, new DateTime(2023, 12, 19), "[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]", "00:00", 12M, "12hrs", companyId, 11);
                AddWorkShiftIfNotExists("L", workRegimen, new DateTime(2023, 11, 11), "[07:00-19:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]*[00:00-00:00]*[19:00-07:00]*[19:00-07:00]*[00:00-00:00]", "00:00", 12M, "12hrs", companyId, 12);
            }

            _logger.InfoFormat("Schedules & Work Regimens created.");
        }

        private WorkRegime AddWorkRegimenIfNotExists(WorkRegimeType type, string daysScheduling, string timeScheduling, int companyId, string specialGroup = null, string legalName = null)
        {
            if (_context.WorkRegimens.IgnoreQueryFilters().Any(s =>
                    s.Type == type && s.DaysScheduling == daysScheduling && s.TimeScheduling == timeScheduling &&
                    s.SpecialGroup == specialGroup &&
                    s.LegalName == legalName &&
                    s.CompanyId == companyId))
            {
                return _context.WorkRegimens.IgnoreQueryFilters().FirstOrDefault(s =>
                    s.Type == type && s.DaysScheduling == daysScheduling && s.TimeScheduling == timeScheduling &&
                    s.SpecialGroup == specialGroup &&
                    s.CompanyId == companyId);
            }

            var workRegimen = new WorkRegime(type, daysScheduling, timeScheduling, companyId, specialGroup, legalName);
            _context.WorkRegimens.Add(workRegimen);
            _context.SaveChanges();
            return workRegimen;
        }

        private void AddWorkShiftIfNotExists(string description, WorkRegime regime, DateTime startDate, string checkInTimes, string restingTimesPerShift, decimal averageHoursPerShift, string legal, int companyId, int visualOrder = 0)
        {
            if (_context.WorkShifts.IgnoreQueryFilters().Any(s => s.DisplayName == description && s.CompanyId == companyId))
                return;

            _context.WorkShifts.Add(new WorkShift(description, regime, startDate, checkInTimes,
                restingTimesPerShift, averageHoursPerShift, legal, visualOrder) {CompanyId = companyId});
            _context.SaveChanges();
        }

    }
}
